type: edu
custom_name: Welcome, customer!
files:
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the 'COMPANY' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in 'COMPANY' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CAR table.");
            }
        }

        public void clearCustomerTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CUSTOMER");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                            "Make sure you don't clear the database after starting the program");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomer(String name, String carName) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                if (carName == null) {
                    if (resultSet.getString("RENTED_CAR_ID") != null) {
                        throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                    }
                    return;
                }

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);
                ResultSet carResultSet = carStatement.executeQuery();

                if (!carResultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                int carId = carResultSet.getInt("ID");

                if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                    throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }


        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomerColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = -1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();

            String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
            db.ifColumnsExist("customer", customerColumns);
            db.checkCustomerColumnProperties();
            return correct();
        }

        @DynamicTest
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();
            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected 'Super company' company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected 'Another company' company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected 'One more company' company.\n" +
                    "Your output should contain '2. One more company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();
            db.clearCustomerTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest
        public CheckResult test8_testAddCustomer() {

            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();

            if (!output.contains("2. Log in as a customer")) {
                return wrong("Start menu should contain \"2. Log in as a customer\"");
            }

            if (!output.contains("3. Create a customer")) {
                return wrong("Start menu should contain \"3. Create a customer\"");
            }

            output = program.execute("2");

            if (!output.contains("The customer list is empty!")) {
                return wrong("If no customers were created you should print 'The customer list is empty!'");
            }

            output = program.execute("3");

            if (!output.contains("Enter the customer name:")) {
                return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                    "Your output should contain 'Enter the customer name:'");
            }

            program.execute("First customer");
            db.checkCustomer("First customer", null);

            program.execute("3");
            output = program.execute("Second customer");
            db.checkCustomer("Second customer", null);

            if (!output.contains("2. Log in as a customer")) {
                return wrong("After creating a customer you should print main menu again.\n" +
                    "Your output should contain '2. Log in as a customer'");
            }

            output = program.execute("2");


            if (!output.contains("1. First customer")) {
                return wrong("In the customer list expected 'First customer' customer.\n" +
                    "Your output should contain '1. First customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            if (!output.contains("2. Second customer")) {
                return wrong("In the customer list expected 'Second customer' customer.\n" +
                    "Your output should contain '2. Second customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("1. Rent a car")) {
                return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
            }

            if (!output.contains("2. Return a rented car")) {
                return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
            }

            if (!output.contains("3. My rented car")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            output = program.execute("3");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            output = program.execute("2");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test9_testRentCar() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            db.checkCustomer("First customer", null);
            db.checkCustomer("Second customer", null);

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            db.checkCar("Drive Now", "Lamborghini Urraco");
            db.checkCar("Car To Go", "Hyundai Venue");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            program.execute("2");
            program.execute("1");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("You rented 'Hyundai Venue'")) {
                return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
            }

            db.checkCustomer("First customer", "Hyundai Venue");

            if (!output.contains("3. My rented car")) {
                return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
            }

            output = program.execute("3");

            if (!output.contains("Hyundai Venue")) {
                return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
            }

            if (!output.contains("Car To Go")) {
                return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
            }

            output = program.execute("1");

            if (!output.contains("You've already rented a car!")) {
                return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
            }

            output = program.execute("2");

            if (!output.contains("You've returned a rented car!")) {
                return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
            }

            db.checkCustomer("First customer", null);

            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest
        public CheckResult test10_testRentedCarInList() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            program.execute("2");
            program.execute("2");
            program.execute("1");
            program.execute("1");
            program.execute("1");
            program.execute("0");

            program.execute("2");
            program.execute("1");
            program.execute("1");

            output = program.execute("1");
            if (output.contains("Hyundai Venue")) {
                return wrong("You shouldn't print out a car if it is already rented!");
            }

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/dao/BaseDao.java
  visible: true
  text: |
    package carsharing.dao;

    import java.sql.Connection;
    import java.sql.SQLException;

    public abstract class BaseDao {

        protected Connection conn;

        public BaseDao(Connection conn) {
            this.conn = conn;
            try {
                createTable(conn);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        protected abstract void createTable(Connection conn) throws SQLException;
    }
  learner_created: true
- name: src/carsharing/dao/memory/CarDaoMemory.java
  visible: true
  text: |
    package carsharing.dao.memory;

    import carsharing.dao.Car;
    import carsharing.dao.CarDao;

    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    public class CarDaoMemory implements CarDao {

        private final Map<Integer, Car> carMap = new LinkedHashMap<>();

        @Override
        public List<Car> getCarsByCompanyId(int companyId) {
            return carMap.values().stream().filter(car -> car.getCompanyId() == companyId).collect(Collectors.toList());
        }

        @Override
        public void saveCar(Car car) {
            car.setId(carMap.size() + 1);
            carMap.put(car.getId(), car);
        }
    }
  learner_created: true
- name: src/carsharing/state/model/StateTransition.java
  visible: true
  text: |
    package carsharing.state.model;

    import java.util.Map;
    import java.util.function.IntSupplier;

    /**
     * The purpose of this class is to call the function
     * <code>toggleState()</code> that toggles the state of
     * this instance to one of the predefined states,
     * based on user choice.
     */
    public class StateTransition {

        private final String stateIndex;
        //                input    next state name
        private final Map<Integer, String> inputToStateMap;
        private final IntSupplier inputGenerator;

        public StateTransition(String stateIndex,
                               Map<Integer, String> inputToStateMap,
                               IntSupplier inputGenerator) {
            this.stateIndex = stateIndex;
            this.inputToStateMap = inputToStateMap;
            this.inputGenerator = inputGenerator;
        }

        public String toggleState() {
            return inputToStateMap.get(inputGenerator.getAsInt());
        }

        public String getStateIndex() {
            return stateIndex;
        }
    }
  learner_created: true
- name: src/carsharing/dao/ConnectionHolder.java
  visible: true
  text: |
    package carsharing.dao;

    import java.sql.Connection;

    public interface ConnectionHolder {
        Connection getConnection();
    }
  learner_created: true
- name: src/carsharing/dao/CompanyDao.java
  visible: true
  text: |
    package carsharing.dao;

    import java.util.List;

    public interface CompanyDao {

        List<Company> getAllCompanies();

        void saveCompany(Company company);
    }
  learner_created: true
- name: src/carsharing/state/model/StateMachineController.java
  visible: true
  text: |
    package carsharing.state.model;

    import java.util.Map;

    public class StateMachineController {
        private final Map<String, StateTransition> transitionMap;
        private String state;

        public StateMachineController(Map<String, StateTransition> transitionMap, String startingStateName) {
            this.transitionMap = transitionMap;
            this.state = startingStateName;
        }

        public void run() {
            while (state != null && !state.isEmpty()) {
                state = transitionMap.get(state).toggleState();
            }
        }
    }
  learner_created: true
- name: src/carsharing/dao/Company.java
  visible: true
  text: |
    package carsharing.dao;

    public class Company {
        private int id;
        private String name;

        public Company(String name) {
            this.name = name;
        }

        public Company(int id, String name) {
            this(name);
            this.id = id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public int getId() {
            return id;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        @Override
        public String toString() {
            return "Car{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/carsharing/dao/Customer.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/h2/H2ConnectionHolder.java
  visible: true
  text: |
    package carsharing.dao.h2;

    import carsharing.dao.ConnectionHolder;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;

    public class H2ConnectionHolder implements ConnectionHolder {

        private Connection conn;

        private static Connection createConnection(String dbName) throws ClassNotFoundException, SQLException {
            Class.forName ("org.h2.Driver");
            return DriverManager.getConnection("jdbc:h2:./src/carsharing/db/" + dbName);
        }

        public H2ConnectionHolder(String dbName) {
            try {
                conn = createConnection(dbName);
                conn.setAutoCommit(true);
            } catch (SQLException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        }

        @Override
        public Connection getConnection() {
            return conn;
        }
    }
  learner_created: true
- name: src/carsharing/dao/memory/CustomerDaoMemory.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/memory/AbstractDaoMemory.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/CustomerDao.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/memory/CompanyDaoMemory.java
  visible: true
  text: |
    package carsharing.dao.memory;

    import carsharing.dao.Company;
    import carsharing.dao.CompanyDao;

    import java.util.*;
    import java.util.concurrent.atomic.AtomicInteger;

    public class CompanyDaoMemory implements CompanyDao {

        private final Map<Integer, Company> companyMap = new LinkedHashMap<>();
        private final AtomicInteger idGen = new AtomicInteger(1);

        @Override
        public List<Company> getAllCompanies() {
            return new ArrayList<>(companyMap.values());
        }

        @Override
        public void saveCompany(Company company) {
            company.setId(idGen.getAndIncrement());
            companyMap.put(company.getId(), company);
        }
    }
  learner_created: true
- name: src/carsharing/dao/BaseItem.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/h2/CustomerDaoH2.java
  visible: true
  learner_created: true
- name: src/carsharing/CarSharingMenus.java
  visible: true
  learner_created: true
- name: src/carsharing/dao/CarDao.java
  visible: true
  text: |
    package carsharing.dao;

    import java.util.List;

    public interface CarDao {

        List<Car> getCarsByCompanyId(int companyId);

        void saveCar(Car car);
    }
  learner_created: true
- name: src/carsharing/dao/Car.java
  visible: true
  text: |
    package carsharing.dao;

    public class Car {
        private int id;
        private String name;
        private int companyId;

        public Car(String name, int companyId) {
            this.name = name;
            this.companyId = companyId;
        }

        public Car(int id, String name, int companyId) {
            this(name, companyId);
            this.id = id;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getCompanyId() {
            return companyId;
        }

        public void setCompanyId(int companyId) {
            this.companyId = companyId;
        }
    }
  learner_created: true
- name: src/carsharing/state/StateMachineFactory.java
  visible: true
  text: |
    package carsharing.state;

    import carsharing.CarSharingMenus;
    import carsharing.state.model.StateMachineController;
    import carsharing.state.model.StateTransition;

    import java.util.*;
    import java.util.stream.Collectors;

    public class StateMachineFactory {

        private final CarSharingMenus menus;

        enum State {
            MAIN_MENU,
            MANAGER_MENU,

            LOAD_COMPANY_LIST,
            EMPTY_COMPANY_LIST,
            CHOOSE_COMPANY_MENU,
            COMPANY_MENU,
            CREATE_COMPANY,

            LOAD_CAR_LIST,
            EMPTY_CAR_LIST,
            CAR_LIST,
            CREATE_CAR,

            EXIT
        }

        public StateMachineFactory(CarSharingMenus menus) {
            this.menus = menus;
        }

        public StateMachineController createStateMachineController() {
            return new StateMachineController(createTransitionMap(), State.MAIN_MENU.name());
        }

        private Map<String, StateTransition> createTransitionMap() {
            List<StateTransition> transList = List.of(
                    new StateTransition(State.MAIN_MENU.name(),
                                        Map.of(1, State.MANAGER_MENU.name(),
                                               0, State.EXIT.name()),
                                        menus::mainMenu
                    ),
                    new StateTransition(State.MANAGER_MENU.name(),
                                        Map.of(1, State.LOAD_COMPANY_LIST.name(),
                                               2, State.CREATE_COMPANY.name(),
                                               0, State.MAIN_MENU.name()),
                                        menus::managerMenu
                    ),
                    new StateTransition(State.LOAD_COMPANY_LIST.name(),
                                        Map.of(0, State.EMPTY_COMPANY_LIST.name(),
                                               1, State.CHOOSE_COMPANY_MENU.name()),
                                        menus::loadCompanyList
                    ),
                    new StateTransition(State.EMPTY_COMPANY_LIST.name(),
                                        Map.of(0, State.MANAGER_MENU.name()),
                                        menus::emptyCompanyList
                    ),
                    new StateTransition(State.CHOOSE_COMPANY_MENU.name(),
                                        Map.of(0, State.MANAGER_MENU.name(),
                                               1, State.COMPANY_MENU.name()),
                                        menus::chooseCompanyMenu
                    ),
                    new StateTransition(State.COMPANY_MENU.name(),
                                        Map.of(0, State.MANAGER_MENU.name(),
                                               1, State.LOAD_CAR_LIST.name(),
                                               2, State.CREATE_CAR.name()),
                                        menus::companyMenu
                    ),
                    new StateTransition(State.CREATE_COMPANY.name(),
                                        Map.of(0, State.MANAGER_MENU.name()),
                                        menus::createCompany
                    ),

                    new StateTransition(State.LOAD_CAR_LIST.name(),
                                        Map.of(0, State.EMPTY_CAR_LIST.name(),
                                               1, State.CAR_LIST.name()),
                                        menus::loadCarList
                    ),
                    new StateTransition(State.EMPTY_CAR_LIST.name(),
                                        Map.of(0, State.COMPANY_MENU.name()),
                                        menus::emptyCarList
                    ),
                    new StateTransition(State.CAR_LIST.name(),
                                        Map.of(0, State.COMPANY_MENU.name()),
                                        menus::carList
                    ),
                    new StateTransition(State.CREATE_CAR.name(),
                                        Map.of(0, State.COMPANY_MENU.name()),
                                        menus::createCar
                    ),

                    new StateTransition(State.EXIT.name(),
                                        Map.of(0, ""),
                                        () -> 0
                    )
            );
            return Collections.unmodifiableMap(
                    transList.stream().collect(Collectors.toMap(StateTransition::getStateIndex, s -> s)));
        }


    }
  learner_created: true
- name: src/carsharing/state/CurrentStateDataFacade.java
  visible: true
  text: |
    package carsharing.state;

    import carsharing.dao.*;

    import java.util.Collections;
    import java.util.List;

    public class CurrentStateDataFacade {
        private final CompanyDao companyDao;
        private final CarDao carDao;
        private List<Company> companies = Collections.emptyList();
        private Company selectedCompany;
        private boolean selectedCompanyPrinted;
        private List<Car> cars = Collections.emptyList();

        public CurrentStateDataFacade(CompanyDao companyDao, CarDao carDao) {
            this.companyDao = companyDao;
            this.carDao = carDao;
        }

        public void loadCompanies() {
            companies = companyDao.getAllCompanies();
        }

        public List<Company> getCompanies() {
            if (companies.isEmpty()) {
                loadCompanies();
            }
            return companies;
        }

        public void saveCompany(String companyName) {
            companies = Collections.emptyList();  // Invalidate companies cache
            companyDao.saveCompany(new Company(companyName));
        }

        public void loadSelectedCompanyCars() {
            cars = carDao.getCarsByCompanyId(selectedCompany.getId());
        }

        public List<Car> getCars() {
            if (cars.isEmpty()) {
                loadSelectedCompanyCars();
            }
            return cars;
        }

        public void saveCar(String carName) {
            cars = Collections.emptyList();  // Invalidate cars cache
            carDao.saveCar(new Car(carName, selectedCompany.getId()));
        }

        public void setSelectedCompany(int companyId) {
            selectedCompany = companies.stream()
                    .skip(companyId - 1)
                    .findFirst().orElseThrow();
            selectedCompanyPrinted = false;
        }

        public Company getSelectedCompany() {
            return selectedCompany;
        }

        public boolean canPrintSelectedCompany() {
            boolean result = !selectedCompanyPrinted;
            selectedCompanyPrinted = true;
            return result;
        }

        public boolean areThereCompanies() {
            return !companies.isEmpty();
        }

        public boolean areThereCars() {
            return !cars.isEmpty();
        }
    }
  learner_created: true
- name: src/carsharing/dao/h2/CompanyDaoH2.java
  visible: true
  text: |
    package carsharing.dao.h2;

    import carsharing.dao.BaseDao;
    import carsharing.dao.Company;
    import carsharing.dao.CompanyDao;

    import java.sql.*;
    import java.util.LinkedList;
    import java.util.List;

    public class CompanyDaoH2 extends BaseDao implements CompanyDao {

        public static final String CREATE_TABLE_SQL =
                "CREATE TABLE IF NOT EXISTS COMPANY(" +
                        "ID INT PRIMARY KEY AUTO_INCREMENT," +
                        "NAME VARCHAR NOT NULL UNIQUE);";
        public static final String SELECT_COMPANIES_SQL =
                "SELECT ID, NAME FROM COMPANY;";

        private final Object insertLock = new Object();

        public CompanyDaoH2(Connection conn) {
            super(conn);
        }

        @Override
        protected void createTable(Connection conn) throws SQLException {
            conn.createStatement().executeUpdate(CREATE_TABLE_SQL);
        }

        @Override
        public List<Company> getAllCompanies() {
            List<Company> companies = new LinkedList<>();
            try (PreparedStatement stmt = conn.prepareStatement(SELECT_COMPANIES_SQL)) {
                final ResultSet resultSet = stmt.executeQuery();
                while (resultSet.next()) {
                    companies.add(new Company(resultSet.getInt("ID"), resultSet.getString("NAME")));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return companies;
        }

        @Override
        public void saveCompany(Company company) {
            synchronized (insertLock) {
                try (PreparedStatement stmt = conn.prepareStatement("INSERT INTO COMPANY(NAME) VALUES(?)")) {
                    stmt.setString(1, company.getName());
                    stmt.executeUpdate();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

    }
  learner_created: true
- name: src/carsharing/dao/h2/CarDaoH2.java
  visible: true
  text: |
    package carsharing.dao.h2;

    import carsharing.dao.BaseDao;
    import carsharing.dao.Car;
    import carsharing.dao.CarDao;

    import java.sql.*;
    import java.util.LinkedList;
    import java.util.List;

    public class CarDaoH2 extends BaseDao implements CarDao {

        public static final String CREATE_TABLE_SQL =
                "CREATE TABLE IF NOT EXISTS CAR(" +
                        "ID INT PRIMARY KEY AUTO_INCREMENT," +
                        "NAME VARCHAR NOT NULL UNIQUE," +
                        "COMPANY_ID INT NOT NULL," +
                        "CONSTRAINT fk_COMPANY FOREIGN KEY(COMPANY_ID)" +
                        "REFERENCES COMPANY(ID));";
        public static final String SAVE_CAR_SQL =
                "INSERT INTO CAR(NAME, COMPANY_ID) VALUES(?, ?)";
        public static final String COMPANY_CARS_SQL =
                "SELECT ID, NAME FROM CAR " +
                        "WHERE COMPANY_ID = ?";

        public CarDaoH2(Connection conn) {
            super(conn);
        }

        @Override
        protected void createTable(Connection conn) throws SQLException {
            conn.createStatement().executeUpdate(CREATE_TABLE_SQL);
        }

        @Override
        public List<Car> getCarsByCompanyId(int companyId) {
            List<Car> cars = new LinkedList<>();
            try (PreparedStatement stmt = conn.prepareStatement(COMPANY_CARS_SQL)) {
                stmt.setInt(1, companyId);
                final ResultSet resultSet = stmt.executeQuery();
                while (resultSet.next()) {
                    cars.add(new Car(resultSet.getInt("ID"), resultSet.getString("NAME"), companyId));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return cars;
        }

        @Override
        public void saveCar(Car car) {
            try (PreparedStatement stmt = conn.prepareStatement(SAVE_CAR_SQL)){
                stmt.setString(1, car.getName());
                stmt.setInt(2, car.getCompanyId());
                stmt.executeUpdate();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/140/stages/761/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 28 Sep 2021 22:41:57 UTC
record: -1
